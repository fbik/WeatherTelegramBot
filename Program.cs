using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using WeatherTelegramBot.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddHttpClient();
builder.Services.AddScoped<IWeatherService, WeatherService>();

builder.Services.AddSingleton<ITelegramBotClient>(provider =>
{
    var token = builder.Configuration["TelegramBotSettings:BotToken"];

    if (string.IsNullOrEmpty(token) || token == "YOUR_BOT_TOKEN_HERE")
    {
        throw new ArgumentNullException(nameof(token), "Bot token is not configured");
    }

    Console.WriteLine($"‚úÖ Telegram Bot Client initialized");
    return new TelegramBotClient(token);
});

builder.Services.AddScoped<UpdateHandler>();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.MapGet("/", () => "Weather Telegram Bot is running!");

// –ó–∞–ø—É—Å–∫–∞–µ–º polling
var botClient = app.Services.GetRequiredService<ITelegramBotClient>();
var updateHandler = app.Services.GetRequiredService<UpdateHandler>();
var receiverOptions = new ReceiverOptions
{
    AllowedUpdates = new[] { UpdateType.Message, UpdateType.CallbackQuery }
};

botClient.StartReceiving(
    updateHandler: updateHandler.HandleUpdateAsync,
    pollingErrorHandler: updateHandler.HandlePollingErrorAsync,
    receiverOptions: receiverOptions
);

Console.WriteLine("ü§ñ Bot started with Polling, Buttons and 5-Day Forecast!");
app.Run("http://0.0.0.0:8080");

public class UpdateHandler : IUpdateHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly IWeatherService _weatherService;

    public UpdateHandler(ITelegramBotClient botClient, IWeatherService weatherService)
    {
        _botClient = botClient;
        _weatherService = weatherService;
    }

    public async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
        if (update.CallbackQuery != null)
        {
            await HandleCallbackQuery(update.CallbackQuery, cancellationToken);
            return;
        }

        if (update.Message?.Text != null)
        {
            var chatId = update.Message.Chat.Id;
            var text = update.Message.Text.Trim();

          //  Console.WriteLine($"üì® Received: {text}");

            try
            {
                switch (text.ToLower())
                {
                    case "/start":
                        await ShowMainMenu(chatId, cancellationToken);
                        break;

                    case "/weather":
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "üå§Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/weather –ú–æ—Å–∫–≤–∞",
                            cancellationToken: cancellationToken);
                        break;

                    case "/forecast":
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "üìä –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/forecast –ú–æ—Å–∫–≤–∞",
                            cancellationToken: cancellationToken);
                        break;

                    case var cmd when text.StartsWith("/weather "):
                        var cityName = text.Substring(9).Trim();
                        await HandleWeatherRequest(chatId, cityName, cancellationToken);
                        break;

                    case var cmd when text.StartsWith("/forecast "):
                        var forecastCity = text.Substring(10).Trim();
                        await HandleForecastRequest(chatId, forecastCity, cancellationToken);
                        break;

                    case "/cities":
                        await ShowCitiesMenu(chatId, cancellationToken);
                        break;

                    default:
                        if (text.StartsWith("/"))
                        {
                            await botClient.SendTextMessageAsync(
                                chatId: chatId,
                                text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                                cancellationToken: cancellationToken);
                        }
                        else
                        {
                            await HandleWeatherRequest(chatId, text, cancellationToken);
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
                Console.WriteLine($"‚ùå Error: {ex.Message}");
            }
        }
    }

    private async Task ShowMainMenu(long chatId, CancellationToken cancellationToken)
    {
        var menuText = "üå§Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç!\n\n" +
                      "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                      "üèôÔ∏è /cities - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞\n" +
                      "üå°Ô∏è /weather <–≥–æ—Ä–æ–¥> - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n" +
                      "üìä /forecast <–≥–æ—Ä–æ–¥> - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n" +
                      "üìç –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞";

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: menuText,
            cancellationToken: cancellationToken);
    }

    private async Task ShowCitiesMenu(long chatId, CancellationToken cancellationToken)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –ú–æ—Å–∫–≤–∞", "city_Moscow"),
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –°–ü–±", "city_St Petersburg")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –ù—å—é-–ô–æ—Ä–∫", "city_New York"),
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –õ–æ–Ω–¥–æ–Ω", "city_London")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –ü–∞—Ä–∏–∂", "city_Paris"),
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –°—Ç–æ–∫–≥–æ–ª—å–º", "city_Stockholm")
            },
            new[] 
        {
            InlineKeyboardButton.WithCallbackData("üèôÔ∏è –ë–∏—à–∫–µ–∫", "city_Bishkek"),
            InlineKeyboardButton.WithCallbackData("üèôÔ∏è –°–æ—Ñ–∏—è", "city_Sofia")
        },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –î—É–±–∞–π", "city_Dubai"),
                InlineKeyboardButton.WithCallbackData("üèôÔ∏è –í–æ—Ä–æ–Ω–µ–∂", "city_Voronezh")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);
    }

    private async Task HandleCallbackQuery(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var chatId = callbackQuery.Message.Chat.Id;
        var data = callbackQuery.Data;

        Console.WriteLine($"üîÑ Callback received: {data}");

        if (data.StartsWith("city_"))
        {
            var city = data.Substring(5); // –£–±–∏—Ä–∞–µ–º "city_"
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);
            await HandleWeatherRequest(chatId, city, cancellationToken);
        }
        else if (data.StartsWith("forecast_"))
        {
            var city = data.Substring(9); // –£–±–∏—Ä–∞–µ–º "forecast_"
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);
            await HandleForecastRequest(chatId, city, cancellationToken);
        }
        else if (data == "show_cities")
        {
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);
            await ShowCitiesMenu(chatId, cancellationToken);
        }
    }

    private async Task HandleWeatherRequest(long chatId, string city, CancellationToken cancellationToken)
    {
        try
        {
            //Console.WriteLine($"üå§Ô∏è Starting weather request for: {city}");

            await _botClient.SendChatActionAsync(chatId, ChatAction.Typing);

            var weather = await _weatherService.GetWeatherAsync(city);

           // Console.WriteLine($"üìä Weather service returned: {weather != null}");

            if (weather != null && weather.Main != null)
            {
               // Console.WriteLine($"‚úÖ Weather data: {weather.Name}, Temp: {weather.Main.Temp}");

                var response = $"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {weather.Name}:\n" +
                              $"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.Main.Temp}¬∞C\n" +
                              $"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather.Main.Humidity}%\n" +
                              $"üí® –í–µ—Ç–µ—Ä: {weather.Wind?.Speed:F1} –º/—Å\n" +
                              $"‚òÅÔ∏è {weather.Weather?[0].Description}";

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", "show_cities"),
                        InlineKeyboardButton.WithCallbackData("üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", $"forecast_{city}")
                    }
                });

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: response,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
            else
            {
                Console.WriteLine($"‚ùå Weather data is null");
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå HandleWeatherRequest error: {ex.Message}");
            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleForecastRequest(long chatId, string city, CancellationToken cancellationToken)
    {
        try
        {
            Console.WriteLine($"üìä Starting 5-day forecast request for: {city}");

            await _botClient.SendChatActionAsync(chatId, ChatAction.Typing);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π
            var forecast = await _weatherService.GetWeatherForecastAsync(city);

            if (forecast != null)
            {
                var response = $"üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {forecast.City} –Ω–∞ 5 –¥–Ω–µ–π:\n\n" +
                              $"üìÖ {forecast.Day1} (–∑–∞–≤—Ç—Ä–∞)\n" +
                              $"üå°Ô∏è {forecast.Temp1}¬∞C, {forecast.Condition1}\n\n" +
                              $"üìÖ {forecast.Day2}\n" +
                              $"üå°Ô∏è {forecast.Temp2}¬∞C, {forecast.Condition2}\n\n" +
                              $"üìÖ {forecast.Day3}\n" +
                              $"üå°Ô∏è {forecast.Temp3}¬∞C, {forecast.Condition3}\n\n" +
                              $"üìÖ {forecast.Day4}\n" +
                              $"üå°Ô∏è {forecast.Temp4}¬∞C, {forecast.Condition4}\n\n" +
                              $"üìÖ {forecast.Day5}\n" +
                              $"üå°Ô∏è {forecast.Temp5}¬∞C, {forecast.Condition5}";

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–æ—Ä–æ–¥—è–º
                var keyboard = new InlineKeyboardMarkup(new[] {
                    new[] {
                        InlineKeyboardButton.WithCallbackData("üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥", "show_cities")
                    }
                });

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: response,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
            else
            {
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}",
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Forecast error: {ex.Message}");
            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã",
                cancellationToken: cancellationToken);
        }
    }

    public async Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        Console.WriteLine($"‚ùå Telegram Polling Error: {exception.Message}");
        await Task.CompletedTask;
    }
}



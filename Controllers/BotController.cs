using Microsoft.AspNetCore.Mvc;
using Telegram.Bot;
using Telegram.Bot.Types;
using WeatherTelegramBot.Services;

namespace WeatherTelegramBot.Controllers;

[ApiController]
[Route("api/bot")]
public class BotController : ControllerBase
{
    private readonly ITelegramBotClient _botClient;
    private readonly IWeatherService _weatherService;

    public BotController(ITelegramBotClient botClient, IWeatherService weatherService)
    {
        _botClient = botClient;
        _weatherService = weatherService;
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Update update)
    {
        if (update.Message?.Text != null)
        {
            await HandleMessage(update.Message);
        }
        return Ok();
    }

    private async Task HandleMessage(Message message)
    {
        var chatId = message.Chat.Id;
        var text = message.Text ?? string.Empty;

        if (text == "/start")
        {
            await _botClient.SendTextMessageAsync(
                chatId,
                "üå§Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç!\n\n" +
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.\n" +
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –∏–ª–∏ London");
        }
        else
        {
            var weather = await _weatherService.GetWeatherAsync(text);
            
            if (weather != null)
            {
                var response = $"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {weather.Name}:\n" +
                              $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.Main?.Temp}¬∞C\n" +
                              $"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather.Main?.Humidity}%\n" +
                              $"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather.Weather?[0].Description}";
                
                await _botClient.SendTextMessageAsync(chatId, response);
            }
            else
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
        }
    }
}